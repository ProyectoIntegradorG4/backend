services:
  # Base de datos PostgreSQL compartida
  postgres-db:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./001-init.sql:/docker-entrypoint-initdb.d/001-init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis para cach√©
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # NIT Validation Service
  nit-validation-service:
    build: 
      context: ./nit-validation-service
      dockerfile: Dockerfile
    container_name: nit-validation-service
    environment:
      POSTGRES_DB: ${NIT_DB_NAME}
      POSTGRES_USER: ${NIT_DB_USER}
      POSTGRES_PASSWORD: ${NIT_DB_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      # Permite override completo si se desea
      DATABASE_URL: ${NIT_DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REDIS_TTL: ${REDIS_TTL}
    ports:
      - "${NIT_SERVICE_PORT}:8002"
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - ./nit-validation-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      DATABASE_URL: ${USER_DATABASE_URL}
    ports:
      - "${USER_SERVICE_PORT}:8001"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - ./user-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Audit Service
  audit-service:
    build: 
      context: ./audit-service
      dockerfile: Dockerfile
    container_name: audit-service
    environment:
      DATABASE_URL: ${AUDIT_DATABASE_URL}
    ports:
      - "${AUDIT_SERVICE_PORT}:8003"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - ./audit-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Nginx) - Opcional
  nginx:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - user-service
      - nit-validation-service
      - audit-service
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge
    name: microservices-network

volumes:
  postgres_data:
    name: postgres_data
  redis_data:
    name: redis_data