services:
  # Base de datos PostgreSQL compartida
  postgres-db:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: grupo4
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # User Service
  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      DATABASE_URL: postgresql+psycopg://user_service:user_password@postgres-db:5432/user_db
    ports:
      - "8001:8001"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - ./user-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Tax Service
  tax-service:
    build: 
      context: ./tax-service
      dockerfile: Dockerfile
    container_name: tax-service
    environment:
      DATABASE_URL: postgresql+psycopg://tax_service:tax_password@postgres-db:5432/tax_db
    ports:
      - "8002:8002"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - ./tax-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Audit Service
  audit-service:
    build: 
      context: ./audit-service
      dockerfile: Dockerfile
    container_name: audit-service
    environment:
      DATABASE_URL: postgresql+psycopg://audit_service:audit_password@postgres-db:5432/audit_db
    ports:
      - "8003:8003"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - ./audit-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Nginx) - Opcional
  nginx:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - user-service
      - tax-service
      - audit-service
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge
    name: microservices-network

volumes:
  postgres_data:
    name: postgres_data