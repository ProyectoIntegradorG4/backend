version: '3.9'

services:
  postgres-db:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: grupo4
    volumes:
      - postgres_experiment_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    networks:
      - experiment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  ingestion-service:
    build:
      context: ./ingestion-service
      dockerfile: Dockerfile
    container_name: ingestion-service
    environment:
      DATABASE_URL: postgresql+psycopg2://postgres:grupo4@postgres-db:5432/postgres
    ports:
      - "8010:8000"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - experiment-network
    restart: unless-stopped
    # Montamos todo el directorio del servicio, no solo app/
    volumes:
      - ./ingestion-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  validator-service:
    build:
      context: ./validator-service
      dockerfile: Dockerfile
    container_name: validator-service
    environment:
      DATABASE_URL: postgresql+psycopg2://postgres:grupo4@postgres-db:5432/postgres
    ports:
      - "8011:8000"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - experiment-network
    restart: unless-stopped
    volumes:
      - ./validator-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  upserter-service:
    build:
      context: ./upserter-service
      dockerfile: Dockerfile
    container_name: upserter-service
    environment:
      DATABASE_URL: postgresql+psycopg2://postgres:grupo4@postgres-db:5432/postgres
    ports:
      - "8012:8000"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - experiment-network
    restart: unless-stopped
    volumes:
      - ./upserter-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  experiment-network:
    driver: bridge

volumes:
  postgres_experiment_data:
