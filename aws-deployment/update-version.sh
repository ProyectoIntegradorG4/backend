#!/bin/bash

# Script de ejemplo para actualizar versiones y probar el sistema de despliegue inteligente

set -e

echo "üîß Script de Ejemplo - Actualizaci√≥n de Versiones"
echo "================================================="

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [servicio] [nueva-versi√≥n]"
    echo ""
    echo "Ejemplos:"
    echo "  $0 user-service 2.1.0          # Actualizar user-service a versi√≥n 2.1.0"
    echo "  $0 auth-service 1.1.0          # Actualizar auth-service a versi√≥n 1.1.0"
    echo "  $0 nit-validation-service 1.2.0 # Actualizar nit-validation-service a versi√≥n 1.2.0"
    echo "  $0 audit-service 1.1.0         # Actualizar audit-service a versi√≥n 1.1.0"
    echo ""
    echo "Servicios disponibles:"
    echo "  - nit-validation-service"
    echo "  - user-service"
    echo "  - audit-service"
    echo "  - auth-service"
}

# Verificar argumentos
if [ $# -ne 2 ]; then
    echo "‚ùå Error: Se requieren exactamente 2 argumentos"
    show_help
    exit 1
fi

SERVICE=$1
NEW_VERSION=$2

# Verificar que el servicio existe
if [ ! -d "$SERVICE" ]; then
    echo "‚ùå Error: El servicio '$SERVICE' no existe"
    echo ""
    echo "Servicios disponibles:"
    ls -d */ | sed 's/\///g' | grep -E "(nit-validation-service|user-service|audit-service|auth-service)"
    exit 1
fi

# Verificar que main.py existe
if [ ! -f "$SERVICE/main.py" ]; then
    echo "‚ùå Error: No se encontr√≥ main.py en $SERVICE"
    exit 1
fi

# Obtener versi√≥n actual
CURRENT_VERSION=$(grep -o 'version="[^"]*"' "$SERVICE/main.py" | sed 's/version="\(.*\)"/\1/')

if [ -z "$CURRENT_VERSION" ]; then
    echo "‚ùå Error: No se pudo extraer la versi√≥n actual de $SERVICE/main.py"
    exit 1
fi

echo "üì¶ Servicio: $SERVICE"
echo "üìã Versi√≥n actual: $CURRENT_VERSION"
echo "üöÄ Nueva versi√≥n: $NEW_VERSION"
echo ""

# Confirmar actualizaci√≥n
read -p "¬øConfirmas la actualizaci√≥n? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Actualizaci√≥n cancelada"
    exit 1
fi

# Crear backup
echo "üíæ Creando backup de $SERVICE/main.py..."
cp "$SERVICE/main.py" "$SERVICE/main.py.backup"

# Actualizar versi√≥n
echo "üîÑ Actualizando versi√≥n en $SERVICE/main.py..."
sed -i.tmp "s/version=\"$CURRENT_VERSION\"/version=\"$NEW_VERSION\"/" "$SERVICE/main.py"
rm "$SERVICE/main.py.tmp"

# Verificar actualizaci√≥n
UPDATED_VERSION=$(grep -o 'version="[^"]*"' "$SERVICE/main.py" | sed 's/version="\(.*\)"/\1/')

if [ "$UPDATED_VERSION" = "$NEW_VERSION" ]; then
    echo "‚úÖ Versi√≥n actualizada exitosamente: $CURRENT_VERSION ‚Üí $NEW_VERSION"
else
    echo "‚ùå Error: La versi√≥n no se actualiz√≥ correctamente"
    echo "üîÑ Restaurando backup..."
    mv "$SERVICE/main.py.backup" "$SERVICE/main.py"
    exit 1
fi

# Limpiar backup
rm "$SERVICE/main.py.backup"

echo ""
echo "üéâ ¬°Actualizaci√≥n completada!"
echo ""
echo "Pr√≥ximos pasos:"
echo "1. Haz commit de los cambios:"
echo "   git add $SERVICE/main.py"
echo "   git commit -m \"Actualizar $SERVICE a versi√≥n $NEW_VERSION\""
echo ""
echo "2. Haz push para activar el despliegue:"
echo "   git push origin main"
echo ""
echo "3. El sistema detectar√° autom√°ticamente el cambio y desplegar√° solo $SERVICE"
echo ""
echo "üí° Para probar la detecci√≥n localmente:"
echo "   ./aws-deployment/detect-changes.sh"
