#!/usr/bin/env python3
"""
Script completo de prueba para el servicio de autenticaci√≥n
Incluye configuraci√≥n de datos de prueba y pruebas de funcionalidad
"""

import requests
import json
import sys
import time
import subprocess
import os
from pathlib import Path

# Configuraci√≥n
BASE_URL = "http://localhost:8004"
API_BASE = f"{BASE_URL}/api/v1"
MAX_RETRIES = 30
RETRY_DELAY = 2

def wait_for_service():
    """Esperar a que el servicio est√© disponible"""
    print("‚è≥ Esperando a que el servicio est√© disponible...")
    
    for attempt in range(MAX_RETRIES):
        try:
            response = requests.get(f"{BASE_URL}/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Servicio disponible")
                return True
        except requests.exceptions.RequestException:
            pass
        
        if attempt < MAX_RETRIES - 1:
            print(f"   Intento {attempt + 1}/{MAX_RETRIES} - Esperando {RETRY_DELAY}s...")
            time.sleep(RETRY_DELAY)
    
    print("‚ùå Servicio no disponible despu√©s de todos los intentos")
    return False

def setup_test_data():
    """Configurar datos de prueba"""
    print("üîß Configurando datos de prueba...")
    
    try:
        # Ejecutar script de configuraci√≥n de datos
        result = subprocess.run([
            sys.executable, 
            "auth-service/test_data_setup.py"
        ], capture_output=True, text=True, cwd=".")
        
        if result.returncode == 0:
            print("‚úÖ Datos de prueba configurados")
            return True
        else:
            print(f"‚ùå Error configurando datos: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error ejecutando configuraci√≥n: {e}")
        return False

def test_health():
    """Probar endpoint de salud"""
    print("\nüîç Probando endpoint de salud...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Servicio de autenticaci√≥n est√° funcionando")
            print(f"   Respuesta: {response.json()}")
            return True
        else:
            print(f"‚ùå Error en health check: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error conectando al servicio: {e}")
        return False

def test_login_success():
    """Probar login exitoso"""
    print("\nüîç Probando login exitoso...")
    
    test_cases = [
        {
            "email": "test1@google.com",
            "password": "Abc123",
            "expected_role": "admin"
        },
        {
            "email": "maria@test.com", 
            "password": "Test123",
            "expected_role": "usuario_institucional"
        }
    ]
    
    tokens = []
    
    for i, case in enumerate(test_cases, 1):
        print(f"   Caso {i}: {case['email']}")
        
        try:
            response = requests.post(
                f"{API_BASE}/auth/login",
                json={"email": case["email"], "password": case["password"]},
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Login exitoso!")
                print(f"      ID: {data.get('id')}")
                print(f"      Email: {data.get('email')}")
                print(f"      Full Name: {data.get('fullName')}")
                print(f"      Is Active: {data.get('isActive')}")
                print(f"      Roles: {data.get('roles')}")
                
                # Verificar rol esperado
                if case["expected_role"] in data.get('roles', []):
                    print(f"      ‚úÖ Rol correcto: {case['expected_role']}")
                else:
                    print(f"      ‚ö†Ô∏è  Rol inesperado. Esperado: {case['expected_role']}, Obtenido: {data.get('roles')}")
                
                tokens.append(data.get('token'))
            else:
                print(f"   ‚ùå Error en login: {response.status_code}")
                print(f"      Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error en login: {e}")
            return False
    
    return tokens

def test_login_failure():
    """Probar login con credenciales inv√°lidas"""
    print("\nüîç Probando login con credenciales inv√°lidas...")
    
    test_cases = [
        {
            "email": "nonexistent@test.com",
            "password": "wrongpassword",
            "description": "Usuario inexistente"
        },
        {
            "email": "test1@google.com",
            "password": "wrongpassword",
            "description": "Contrase√±a incorrecta"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"   Caso {i}: {case['description']}")
        
        try:
            response = requests.post(
                f"{API_BASE}/auth/login",
                json={"email": case["email"], "password": case["password"]},
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 401:
                print(f"   ‚úÖ Correctamente rechaz√≥ credenciales inv√°lidas")
            else:
                print(f"   ‚ùå Deber√≠a haber devuelto 401, pero devolvi√≥: {response.status_code}")
                print(f"      Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error en test de credenciales inv√°lidas: {e}")
            return False
    
    return True

def test_token_verification(tokens):
    """Probar verificaci√≥n de tokens"""
    if not tokens:
        print("\n‚è≠Ô∏è  Saltando verificaci√≥n de token (no hay tokens)")
        return True
        
    print("\nüîç Probando verificaci√≥n de tokens...")
    
    for i, token in enumerate(tokens, 1):
        print(f"   Token {i}: {token[:20]}...")
        
        try:
            response = requests.get(
                f"{API_BASE}/auth/verify-token",
                params={"token": token}
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Token v√°lido!")
                print(f"      User ID: {data.get('user_id')}")
                print(f"      Email: {data.get('email')}")
                print(f"      Roles: {data.get('roles')}")
            else:
                print(f"   ‚ùå Error verificando token: {response.status_code}")
                print(f"      Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error verificando token: {e}")
            return False
    
    return True

def test_invalid_token():
    """Probar verificaci√≥n de token inv√°lido"""
    print("\nüîç Probando verificaci√≥n de token inv√°lido...")
    
    invalid_tokens = [
        "invalid.token.here",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.invalid.signature",
        ""
    ]
    
    for i, token in enumerate(invalid_tokens, 1):
        print(f"   Token inv√°lido {i}: {token[:20] if token else 'vac√≠o'}...")
        
        try:
            response = requests.get(
                f"{API_BASE}/auth/verify-token",
                params={"token": token}
            )
            
            if response.status_code == 401:
                print(f"   ‚úÖ Correctamente rechaz√≥ token inv√°lido")
            else:
                print(f"   ‚ùå Deber√≠a haber devuelto 401, pero devolvi√≥: {response.status_code}")
                print(f"      Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error verificando token inv√°lido: {e}")
            return False
    
    return True

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Pruebas completas del servicio de autenticaci√≥n")
    print("=" * 60)
    
    # Verificar que estamos en el directorio correcto
    if not Path("auth-service").exists():
        print("‚ùå No se encontr√≥ el directorio auth-service. Ejecuta desde el directorio backend.")
        return 1
    
    # Configurar datos de prueba
    if not setup_test_data():
        print("‚ùå Error configurando datos de prueba")
        return 1
    
    # Esperar a que el servicio est√© disponible
    if not wait_for_service():
        print("‚ùå El servicio no est√° disponible")
        return 1
    
    # Ejecutar pruebas
    tests_passed = 0
    total_tests = 5
    
    # Test 1: Health check
    if test_health():
        tests_passed += 1
    
    # Test 2: Login exitoso
    tokens = test_login_success()
    if tokens:
        tests_passed += 1
    
    # Test 3: Login fallido
    if test_login_failure():
        tests_passed += 1
    
    # Test 4: Verificaci√≥n de tokens
    if test_token_verification(tokens):
        tests_passed += 1
    
    # Test 5: Token inv√°lido
    if test_invalid_token():
        tests_passed += 1
    
    # Resumen
    print("\n" + "=" * 60)
    print(f"üìä Resumen de pruebas: {tests_passed}/{total_tests} pasaron")
    
    if tests_passed == total_tests:
        print("üéâ ¬°Todas las pruebas pasaron exitosamente!")
        return 0
    else:
        print("‚ùå Algunas pruebas fallaron")
        return 1

if __name__ == "__main__":
    exit(main())
